Есть персона с полями (id, firstname, lastname, birthdate, и тп )
И есть верификация персоны (id, personid, metadata, status) в метаданных лежат данные по верификации, полученные из документа
(firstname, lastname, birthdate, nationality и тп )

Часто возникает проблема, когда нужно доставать верификацию по персоне и саму персону, и для этого нужно лезть в две таблицы.
А именно, нужно сверять имена, дату рождения из верификации и какие-то данные из документов с самой персоной.
Плюс также возникает проблема, когда на персону создается дубль верификации, лишняя верификация, который быть не должно.
(бывает стреляет на проде). Поскольку у верификации есть свой id не привязанный к его идентичности, 
по сути его идентичность это часть полей персоны, а не свой уникальный id.

По сути это отношение можно денормализовать по следующим причинам
1) Каждая персона идентифицируется дополнительно также своей верификацией и ее статусом
2) Историчность верификаций не нужна, важен только последний статус.
3) Не должны создаваться дубли верификации - должна быть нормальная идентичность

Даже учитывая что база данных postgres, можно завести полe jsonb для верификации, (ну или рядом положить поля отдельные) 
и обновлять отдельные поля по верификации уже в персоне, без проблем.
скорее всего поле jsonb предпочтительнее, в плане расширяемости, если вдруг добавится больше одной верификации.


Итого

Я раньше рассматривал отношения больше в плане хранения, а денормализацию - как оптимизацию для улучшения работы с БД.
хотя, как например в кейсе выше, важно также смотреть на логический уровень и взаимодействие между объектами и сценарии использования.
Опять все упирается в логический уровень :)

