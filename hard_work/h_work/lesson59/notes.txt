Пример 1 - ранее был необходим функционал подсчета
возможности подачи при разных условиях.
Естественно, в тот момент, думая, что поскольку данные чаще всего нужны из сущности Транспортного средства,
я запихал эти функции туда, но потом это превратилось в кашу, поскольку иногда нужно было считать не только на основе данных ТС и логика была в сервисах и в классе.

P.S - благодаря механизму global usings в c# можно делать нормальные импорты функций, без постоянного вызова статик класса, где они лежат,
как условный import в js - очень удобно для работы с функциональным стилем.

Пример 2 - (пример выдуманный, код реальный) 
выделили базовый класс германского сервиса недостающих датапоинтов, наследовали от него конкретные реализации, чтобы переиспользовать код.
Но вдруг в какой-то момент, решаем что для Gbr компаний нужны только адреса и регистрационные документы с дополненными правилами.
Придется делать внутренние методы в protected и заниматься другой фигней)

Оставляем наследование только от первого абстрактного класса и переопределяем методы как нам нужно.
А часто изменяемые функции выносим для переиспользования, избавляясь от лишнего наследования.


Пример 3 - базовый класс активации баннера для открытия счета.
Сильно завязываем клиента на то, что нужно переопределять метод активации, причем он может быть не нужен.
Место дополнительной логики по активации всегда фиксированно до вставки баннера, что не всегда актуально.
Логику вставки баннера с обновлением дашборда по пушу - тяжело переиспользовать (даже в других местах)

Итого - еще одна важная тема для снижения связности и упрощения переиспользования кода, никогда о таком не думал.
Очень часто в работе сталкиваюсь, с тем, что натягиваем в ООП функциональный подход вместо простых функций - 
это привносит лишние не нужные абстракции с генерализованными именами (Helper, Calculator, Service) и сильно увеличивает связность.
Я конечно, часто предпочитаю наследование композиции, но даже в случаях с нормальным, как я думал наследованием, функциональный подход, может сильно все упростить.
 