Проблема реляционных баз - тяжело представить вложенную коллекцию связанных объектов для дальнейших манипуляций.

В том же postgres есть json поля, но чтобы накрутить логику получения, обновления отдельных элементов - приходится страдать, 
куда проще и эффективнее отделять в отношения, для нормальной работы join-ов или если элементов коллекции может быть много.
B-tree индексы куда эффективнее, чем gin/gist.

Дополнительно, когда вся компания работает с одной базой данных, затащить новую практически невозможно.
Использовать редис без нормально настроенного durability - тоже не представляется возможным.

В любом случае приходится упиратся в эффективность хранения и запросов - думать как работает конкретная база данных - postgres.

Сейчас во всех командах в базе у каждой сущности есть - uuid первичный ключ в отношении, по ним строится 99% функционала.

Самым простым решением для части нашей логики, был бы переход на базу типа монго, в ней можно сделать автомаппинг полей, 
в таком случае слой доступа данных бы сильно упростился. 
Особенно с учетом наличия функционала для вложенных коллекций.
Также пропадет необходимость в использовании транзакций для вставки связанных данных.

Но монго генерит по-умолчанию для каждого документа objectid. 
И производительность базы будет лучше - если это использовать по-умолчанию.
Соот-во также будем завязываться на id документов - местами.
Но опять же можно сделать уникальный набор полей как unique index - и завязываться на них.

Итого:

Буду реалистом и считаю, что этот тренд с id-шниками изменить достаточно сложно.
Это же влечет к трудностям упрощения модели данных на моей работе. (множество сущностей ссылаются на companyid, userid - id шники компаний и пользователей и другие).

Большие компании повторяют опыт друг друга и используют одни и те же базы данных.
НО я все же поисследую, какие интересные базы помимо mongodb, postgres-а, существуют на рынке и как они смогут помочь мне в будущем.

 