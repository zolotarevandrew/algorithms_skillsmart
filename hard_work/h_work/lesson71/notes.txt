1) Валидация такс.номера - в одном интерфейсе намешаны сразу 3 типа компаний (компании, фрилансеры, комплексные компании).
Реализация при этом была одна.

Разделяем на 3 независимых интерфейса, со своей собственной реализацией (считаем что модули отдельных типов компаний, должны быть изолированы).
При этом если есть общая логика валидаций, ее можно вынести в ядро, на основе статических функций, чтобы далее уменьшить coupling.

2) Есть один общий класс Analitics, при этом 
- этот класс тяжело мокается (нет интерфейса и куча методов);
- намешана куча разных методов для отправки аналитики из разных модулей;
 
Пробовали разделить на используемые модули (корпораты, убо, и т п)
- интерфейсы аналитики будут находится в каждом конкретном модуле со своей реализацией.
- чтобы не зависеть от общей реализации, ребята уже вынесли асинхронную обработку аналитики через рэббит и отправку сообщения ObaAnalyticsMessage.

Например для IUboAnalyticsSender и ICorporateAnalyticsSender

Здесь не хочется дробить на отдельные интерфейсы на каждый метод, поскольку мы просто проксируем сообщение в рэббит через отдельные логические сервисы - создавая дополнительный indirection.
Поскольку логика проброса параметров по сути реализуется по месту вызова конкретной аналитики, проще сразу паблишить сообщение в рэббит конструируя его прямо по месту вызова.
При этом если для кастомной аналитики нужно дособрать данных из разных мест, можно также инкапсулировать и создать отдельные типизированные сообщения ObaUboAnalyticsSpecificMessage, ObaCorporateAnalyticsSpecificMessage,
которые внутри будут паблишить ObaAnalyticsMessage уже заполненное чем нужно.

В таком случае не нужны мок сервисы, просто в юнит тестах будем ловить, что в ipublisher опубликовано нужное сообщение (местами типизированное). 
Также выходит, отвязались от конкретной реализации, потому что асинхронное сообщение может ловить любой изолированный модуль.   

3) Фасад сервисов датаколлекции 
- разделяем на ряд независимых интерфейсов.
- реализацию также теперь можем разделить.
- часть методов убираем из интерфейса (например посылку аналитики по месту использования)

4) Сервис персон онбординга - разделяем на независимые интерфейсы, но оставим одну реализацию.
(связность с onboardingcontext была излишней)

5) Сервис "процессинга" индустрий
- Методы Save просто сохраняют в базу без логики - indirection
- ProcessCompanyIndustries - делают одно и тоже разными способами, берут индустрии из базы и собирают новую модельку, не хватает полиморфности.
- ProcessIndustries - делают одно и тоже разными способами, берут индустрии и наполняют их переводами..
 
Разделяем на два понятных независимых интерфейса.
Методы Save будем вызывать по месту в явном виде..

Итого - считаю, что очень важно зависеть только от того, что нужно. Потенциально снижаем coupling.
В таком случае просто не удастся использовать не нужное и контекста в голове держать нужно меньше.
При этом IoC контейнеры и интерфейсы сами по себе не панацея, важно не вносить излишний Indirection и не переусложнять систему. 
