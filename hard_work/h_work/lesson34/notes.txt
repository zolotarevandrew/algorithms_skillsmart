1) Есть тип компаний -  фрилансеры и компании под них был написан и использован одинаковый общий код готовности проверки компании аналитиками, 
в итоге это выстрелило как баг, потому что забыли в одном месте поменять один общий флаг.
Развивать их надо было параллельно.

Для разных стран используется один общий справочник легальных форм компании. 
Но в каждой стране часто добавляются различные специфичные метаданные для конкретных легал форм.
Хранить их явно стоит в json файлах отделенных по стране, а также отделять интерфейсы на общие и в рамках страны.
Легальные формы - зачастую имеют различную спецификацию даже юридически

Для германского онбординга для двух разных типов компаний были выделены 3 одинаковых шага досбора данных, 
выделен общий базовый класс, но спецификация принципиально разная.

2) точно не скатывался в боксинг
Но могу сказать следующее, часто вижу как разработчики напихивают не понимая методы, куда попало, 
в helper классы или еще хуже расширяют существующие неверным образом.
Теперь хотя бы знаю как это называется)

3) заглядывать в другие файлы приходится не так часто, но в рамках старого кода это было прямо проблематично.

я бы выделил следующее, чтобы от такого избавиться, в порядке возрастания

- понятный нейминг переменных, зависимостей, методов, в рамках доменной логики;

- high cohesion на уровне классов и модулей, изменения не должны делаться в куче различных мест;

- устранение indirection-а на уровне классов, функций, зависимостей, модулей, сервисов;

- модули на уровне доменных понятий, отделяем независимые модули на уровне конкретных бизнес фич, 
они не должны быть маленькими, иначе превратится в vertical slice architecture, идея в том, чтобы все изменения делать в рамках модуля.

- неверное разделение ответственности у микросервисов, неверное разбиение абстракций.
Здесь похоже - если неверно разделить абстракции или микросервисы будет явный indirection с лапшеобразными зависимостями.