1 заход

Сначала на автомате начал сразу писать реализацию - хотя 4 раза все перечитал.
В итоге удалил весь код - и пошел заново. 

Написал первый тест, потом сразу написал второй тест, также на автомате.
Хотя если бы я закомиттил, второй тест сразу бы не заработал.

Написал три теста на добавление в корзину, сделал первую реализацию, запустил тесты, да они прошли.
Но потом понял, что количество и цена товара, к самому товару не особо относятся (они могут меняться отдельно),
поправил реализацию и тесты, получилось уже не совсем маленькое изменение.

Также понял, что лучше написать тесты сразу отдельно для warehouse.
Написал 1 тест, и понял что нужно писать сначала тест для ItemQuantity.
Написал тесты для ItemQuantity, для возможности удаления, 1 тест не прошел, потому что забыл как работает uint, удалил реализацию)
Написал тесты для самого метода удаления, тест не прошел, удалил все изменения (хотя просто написал тест неправильно)

Исправлений получилось - 1 + 1 + 1 + 1 + 1 + 1 + 1 = 7 
Изменений получилось = 13

Изменения старался делать максимально маленькими - за счет реализации простых классов/функций, но их можно было бы сделать гораздо меньше, 
если бы сразу продумал, все мелкие детали, а потом уже начал и писать тесты и реализацию. 


2 заход
также сразу же по привычке пошел писать код, удалил все, и начал заново.
начал с самых простых сущностей - TotalPrice, для работы с суммой конкретной корзины.
написал тест, добавил реализацию, для всех кейсов, все прошло с 1 раза.
далее понял, что стоит отдельно уметь считать сумму по конкретному элементу (ShoppingItemTotalPrice), и можно написать тесты и реализацию под нее.
Всеравно сделал 3 ошибки, но это уже куда более лучший результат.

Исправлений получилось - 1 + 1 + 1 = 3
Изменений получилось = 7
 
Изменения получилось сделать гораздо меньше чем в первом заходе, поскольку сразу стал ориентироваться на более простые реализации и сразу продумывал более детально.
Пока не вижу как можно было бы еще уменьшить эти изменения, старался по максимуму. 


Итоги - буду применять данный подход на практике, 
(пока что напрямую не получилось, попало на выходные + задачи резко закончились важные).
Очень понравилось, удалять собственный не рабочий код, этакая практика битья по рукам себя за глупые ошибки - приучает думать более качественно.

Ну и небольшие атомарные изменения
- заставляют делать код более простым
- продумывать архитектуру решения заранее
- тесты всегда следуют спецификации

P.S задания просил сгенерить у ChatGpt, идей маловато своих: )
