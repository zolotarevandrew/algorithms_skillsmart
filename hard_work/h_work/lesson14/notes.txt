1) какие три плюса и какие три минуса, по этому материалу, характерны для вашего стиля применения TDD

На самом деле до начала hard work, я не особо применял TDD.
Было нечто следующее - я старался писать код, на основе принципов Сohesion/Coupling/SRP, чтобы его легко было протестировать,
написал класс, а затем тесты к нему, то есть это не всегда была спецификация. Покрывал не весь функционал, а только самое важное/критичное.

плюсы:
- Регресс из коробки - при наличии достаточного количества тестов легче вносить изменения в систему, ну и ментально это очень приятно сказывается;

- TDD приучает писать более читаемый/модульный код, это очевидно, протестировать функцию на 1000 строк просто нормально не получится,
приходится думать над дизайном хотя бы на уровне кода. 

- TDD улучшает мышление над системой на 3 уровне, улучшается дизайн и стратегическое развитие системы.

минусы:
- Инъекция зависимостей, излишнее абстрагирование может привести к усложнению системы, 
можно просто создать объект через new или использовать реализацию без интерфейса, в этом нет ничего страшного, если оно не расползается между модулями.

- любое понимание TDD не панацея от дефектов - людей всеравно придется проверять 
(неверное понимание спецификации, непонимание как работает система в целом, 
просто человеческий фактор усталость, невнимательность);

- Создание различных Service/Helper со статик методами просто ради того, чтобы протестировать функции внутри основного класса,
(излишнее применение SRP - создается множество простых классов)

это в целом было упомянуто, но здесь хочется подчеркнуть, что "тупое" следование TDD без понимания дизайна системы и обдумывания АТД, 
в большинстве cлучаев приведет к усложнению и запутыванию.


2) На что больше похож ваш стиль TDD -- на парадигму разработки/дизайна, или же это просто продуктивная техника тестирования?

Я все-таки даже изначально воспринимал это как парадигму разработки/дизайна, 
потому что не хочу зацикливаться на написании тестов и команде своей это навязывать. 
Да тесты должны быть в достаточном количестве, но если они не отображают спецификацию системы и не эволюцинируют вместе с кодом, 
толку от них мало, баги зачастую будут находится на границах связи систем или с помощью EndToEnd/ручных тестов.

Итого

Мне понравилась техника из занятия по TDD и я стараюсь ей следовать. 
Когда по сути сначала ты проектируешь, описывая спецификацию через тесты 
(можно просто копировать куски из спецификации продакта и создавать тесты),
а затем по мере реализации, возможно переписываются тесты и улучшаются абстракции.

(+ техника битья себя по рукам, удаляя неверный код, приучает лучше думать)