1) Стек

Пойдем по пути тестирования только веб-части. 

- Puppeteer — основной инструмент для снятия скриншотов, который предоставляет полный контроль над браузером и позволяет снимать скриншоты страниц, элементов и областей. 
Настройки устройств, запросов и анимаций делают его оптимальным выбором для стабильного тестирования.
- Resemble.js — инструмент для визуального сравнения, выполняющий точное пиксельное сравнение с гибкими настройками порогов и подсветкой различий. 
Отлично интегрируется с Node.js.
- PostgreSQL — база данных для хранения метаданных (тесты, результаты сравнений, параметры запусков). 
Поддержка JSONB позволяет хранить сложные данные, включая результаты от Resemble.js.
- MinIO — S3-совместимое объектное хранилище для хранения изображений (эталонных, тестовых, с подсветкой различий). 
Легко интегрируется с Node.js.
- Node.js — универсальный стек для фронтенда и бэкенда, обеспечивающий легкость интеграции всех компонентов и поддержку CI/CD процессов.

2) Покрытие тестами

Типы снэпшотов:
- Полностью страницы;
- Компоненты (хедер, футер, кнопки, формы, модальные окна).

Состояния:
- Наведение;
- Клик;
- Заполнение.

Разрешения:
- Desktop, tablet, mobile (на основе статистики клиентов).

Многоязычность:
- Тестирование на всех поддерживаемых языках, особенно с длинным текстом.

3) Схема работы

db.sql - схема базы данных;
resemble_jsonb_column_schema.json - json схема результата сравнения от resemble.js;
api - md файлы с описанием api и sql запросами;

Окружения:
- stage: Для проверки изменений, тестирования новых фич и устранения дефектов. (Несколько стендов)
- preprod: Для финальной валидации перед релизом. (Один стенд)

3.1 - Написание тестов
При каждом деплое на любой стенд тесты автоматически добавляются или обновляются в таблице tests_list. 
Тестировщик при создании теста указывает - уникальное имя, разрешение и язык (для начала в виде метаданных).
Также можно добавить вручную через API.

api - tests_list_api.md

3.2 - Запуск рана

Тестировщик выбирает окружение, имя рана (по умолчанию — номер текущего релиза), и список тестов (по умолчанию — все тесты).
Cоздается запись в таблице snapshot_run.
Для каждого выбранного теста сохраняется cнэпшот в таблице snapshots и соот-во в таблице snapshot2runs, файлы снимка сохраняются в MinIO.

api - snapshot_run_api.md

3) Эталонные снэпшоты

Эталонные снэпшоты уникальны для каждого теста и одинаковы для всех окружений.
После завершения рана тестировщик может выбрать или заменить эталонный снэпшот через API.

api - snapshot_benchmark_api.md

4) Cравнение

для сравнения используем Resemble.js и для каждого теста в ране
будем сравнивать их с эталонными, сохраняя результат в snapshot_comparisons.
- Если для теста есть эталонный снэпшот, выполняется сравнение.
- Если эталонного снэпшота нет, ничего не делается, сравнивать не с чем.

api - snapshot_comparison_api.md

5) Формирование отчета

По результатам формируется отчет

api - snapshot_comparison_report_api.md

Итого - придумал очередный велосипед, но в рамках обучения, было интересно, особенно останавливать себя, чтобы сделать хоть какой-то mvp.
Ну и сильно помог chat gpt с генерацией md файлов и описанием, вручную бы делал в раз 5 дольше.
Много корнер кейсов не учтено, но зато базовые вещи описаны.
