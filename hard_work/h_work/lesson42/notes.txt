В проекте достаточно хорошо со структурами данных, когда я пришел, старался уйти от анемичной модели, которая была повсюду. 

- при работе с шагами онбординга, шаг это код шага + контракт для фронта, 
внутри в 99% случаев используется доменная модель и делается маппинг в dto модельки для restapi;
- в важных местах системы (верификации, нотификации, логика онбординга в целом);
- Есть места в блоках оркестракции, где доменная логика отсутствует - но это временная мера, над которой предстоит далее поработать.

Заметил, что большая часть разработчиков, начиная проектировать - строит «бизнес сервисы» и контракты от формата входных данных апи.
Итого модель данных проекта расползается по разным местам, с разными контекстами использования и налепливается напрямую на рест модель.

Вроде отличие не сильно важное для рядового разработчика, но итоговый результат обычно печален, 
в рамках долгосрочного развития системы, стараюсь это искоренять, насколько могу.

Проблема в том - что доменная модель не всегда видна при первой реализации, но в долгосроке, она всеравно появится.

Форматы сериализации - могут поменятся, а преимущество использовать доменную модель независимо, 
в любых местах (messagehandler-ах, оркестрации, и в любых других местах проекта)
дает очевидные плюсы.

Для отказа от id и orm
1) Ключ - набор атрибутов уникально определяющих сущность.
В таком случае с кейсом new/cancel, можно переслать часть атрибутов для отмены или полную сущность, и удалить ключ из хранилища.
2) натуральный ключ - 
Инн компании, 
Номер паспорта
3) Хэш по части атрибутов.
С хэшем все куда сложнее, если в него включена некая дата создания.
использовал такое для случая работы с вебхуками внешней системы.

В таких случаях использовать можем:
- key/value хранилище
- nosql базу типа монго
- реляционную базу

Проблема - не всегда получается в бизнесе уникально идентифицировать сущность на момент создания, 
допустим, когда уникальный атрибут заполняется позднее, например после регистрации пользователя.
Потому пока не особо понятно, как в таких случаях избавляться от id шек.
Вариант самый простой, что я вижу:
-  в таком случае - это и нельзя считать сущностью, а ее временным черновиком, создавать сущность, 
только после идентификации уникальных атрибутов; (иметь некие общие механизма драфта сущностей);

Итого - четко выделил для себя, перечитав и обдумав раз 10), что наличие явной доменной модели данных проекта, несет существенные преимущества.

При этом я/мы разработчики, зачастую пытаемся натянуть наши программы под форматы сериализации, 
И форматы хранения (связь с id шками).

С последним я столкнулся делая проект по ООАП, когда у меня был дикий диссонанс, что для хранения сущностей нужно лепил каждой сущности id шники, но оно не работало с моделью АТД.
Что существенно ухудшило саму модель данных проекта..

По сути если модель данных изолированна - от внешних влияний, как раз таки можно легко придти
К functional core / imperative shell парадигме.