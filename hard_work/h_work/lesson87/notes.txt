1) Текущий шаг стейт-машины

До: Текущий шаг мог быть как полноценным шагом, так и промежуточным состоянием. 
Можно было создавать state из любой строки, что могло привести к проблемам при обходе стейт-машины.

После: Оборачиваем state в базовый тип, а типизацию реализуем через enum в наследнике. 
Дополнительно добавляем функцию для матчинга вместо проверки через if на IsStep.
Это частично касается инвариантов, так как изначально существовал неявный инвариант, который никто не проверял.

2) Сессия дополнительных вопросов

До: Были сложности с индексами и проверками при навигации (определение текущего вопроса).

После: Теперь последний вопрос с состоянием pendingAnswer явно виден в списке. Это проверяется через инвариант. 
Навигация не мутирует состояние, а просто пытается изменить индекс назад или вперед. 
При старте и завершении сессии дополнительно проверяется наличие неотвеченных вопросов.

3) Номер телефона

До: Номер телефона во многих местах представлялся строкой, что создавало вероятность отправки SMS на невалидный номер.
После: Типизируем номер телефона в отдельный объект, что обеспечивает нормализацию и валидацию "из коробки".


Итого - продумывание инвариантов заставляет менять подход к проектированию структуры данных. 
Приходится писать больше кода, учитывая как явные, так и неявные условия.

Базовые паттерны, которые я выделил для себя еще раз:
- создание кастомных типов (не всегда помогает, но решает большую часть проблем);
- внедрение ассертов (предусловия, постусловия);
- дополнительная визуализация работы структуры данных и переходов между состояниями (мини-документация).

По сути - все что проходили на курсе ООАП:)