1) Фабрика создания клиента
получаем зависимости через DI контейнер, они конкретные и используются только на уровне клиента.
инкапсулируем логику создания сложного клиента, также регистрируем создание клиента через DI контейнер.

2) класс работы с данными
IDbMapper интерфейс, который получаем извне для работы с базой данных, нет конкретной зависимости от
Dapper, EntityFramework-а. 
По сути написали основные методы, которые можно использовать в большей части запросов.
Понятно иногда лучше завязаться на конкретности, но такое позволяет легко обновлять зависимости сразу во множестве микросервисов, 
например обновить Dapper и Npgsql в конкретной реализации, в общем шаблоне микросервиса.

3) в Api методе, используем интерфейсы для инжектирования клиента и хранилища.

4) Конкретная step transition machine - зависит от фабрики триггеров, возвращающей абстрактный класс

5) IOpeningAccountProcessService - абстрагируемся от конкретной реализации работы с процессом оркестрации через интерфейс и получаем его через DI.  

Итого - DIP мощный принцип, если грамотно его соблюдать (как и остальные) - не заводить интерфейсы на каждый чих и не пихать их сразу же в DI контейнер.
Главное строго соблюдать границы модуля и продумывать межмодульное и внутримодульное взаимодействие (например добавлять асинхронное общение, снижая coupling).

