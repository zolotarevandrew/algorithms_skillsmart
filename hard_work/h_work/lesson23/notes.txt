1) Зависимость от Camunda
семантика 
- статическая семантика - да, каждый микросервис использует болванку, в которой включена зависимость клиента Zeebe Для камунды 8.
- динамическая семантика - да, каждый микросервис полагается на импортированный код из клиента zeebe из библиотеки.
- логика программы (Функциональные требования) - поскольку взаимодействие происходит через абстракции 
каждый микросервис хоть и имеет зависимость от библиотеки через болванку, но изменение делается в одном месте и код использует общие библиотечные абстракции
(абстракцию воркеров - externaltask)
для взаимодействия с камундой.
а также имеется отдельный выделенный микросервис бизнеспроцессов, для инкапсуляци логики взаимодействия в одно месте.
соответственно.

НО запасного варианта нету, поэтому здесь тоже проявляется зависимость от камунды, если она упадет, перестанут работать большинство процессов,
что скажется на пользователях.

характеристики
- производительность (количество одновременно открываемых счетов и т д ) - да, зависит от производительности камунды
- безопасность - да зависит, от наличия дыр безопасности камунды
- масштабируемость - да зависит, от масштабируемости камунды
- надежность - да зависит, от надежности камунды

пространство допустимых изменений
- зависимость от обработки переменных (input/output variables на вход и выход джоб воркеров) - обрабатываются в отдельном микросервисе,
но используют собственную библиотеку расширений, и явно зависят от изменения библиотеки расширений, и логики в ней.
(на 8 версии зависимости менее выражена, потому что используется Dictionary<string, object>, большая часть кода была написана для камунды 7)
- зависимость от конкретной реализации поллинга - отсутствует, джоб воркеры не используются напрямую, а имеют дополнительную логику обработки,
в том числе ошибок и сбоев.

супер спецификация
- завимимость от изменения логики поллинга джоб воркеров в библиотеке Zeebe, может повлиять явно на характеристики (производительность)
- завимимость от изменения grpc библиотеки для взаимодействия с Zeebe, внутри библиотеки zeebe, может повлиять явно на характеристики (безопасность)
здесь можно пробовать делать форк библиотеки и одновременно поддерживать две версии поллинга свою и библиотечную, но этого не сделано пока.

итого жесткая зависимость от камунды 8

2) зависимость от библиотеки stateless (statemachine) Для флоу онбординга

семантика 
- статическая семантика - да, импортируется зависимость от библиотеки
- динамическая семантика - да, используется код конкретной библиотеки
- логика программы (Функциональные требования) - нет, логика программы построена на собственной абстракции 

характеристики
- производительность (скорость перехода между шагами) - да, если в библиотеке есть не оптимизированные места, они могут аффектить приложение
но реально выходит, что не зависит, код работает за доли миллисекунд, есть бенчмарки и большое коммьюнити.
сам флоу строится на основе собственного цикла и абстракции, поэтому влияние на производительность минимально и может регулироваться руками.

- безопасность - да, при наличии дыр безопасности, фактически, можно изменить стейт машину в динамической памяти программы, и кидать на какой-то левый шаг для скамов.
но фронтенд роутит только на известные шаги (просто кинет 404), тогда придется еще ломать и фронтенд.

- масштабируемость - нет, флоу шагов не влияет на масштабируемость системы в целом
- надежность - нет, флоу шагов не влияет на надежность системы в целом

пространство допустимых изменений
- зависимость от изменения логики поиска в глубину (это написано самостоятельно для пропуска шагов), 
может повлиять на надежность системы, некоторые онбординги могут просто перестать нормально работать.
- зависимость от экспорта переходов между состояниями из библиотеки, может повлиять на observability системы, поскольку 
сделали собственный экспортер на фронтенд, для просмотра какие шаги посещал юзер.

3) Зависимость от информации о компании в сервисе авторизации/аутентификации
(исторически сложилось что их туда положили, а они там быть не должны)

семантика 
- статическая семантика - нет, отдельные микросервисы не зависят от информации о компаниях
- динамическая семантика - да, в API при работе с авторизованным юзером используется информация о компаниях, лежит в общей болванке микросервиса.
- логика программы (Функциональные требования) - да, все микросервисы покрыты вызовами данных о компаниях. не имея свою копию..

характеристики
- производительность (конкретного микросервиса) - да, в контексте API зависит от производительности данных о компании, если сервис auth будет тормозить, то данные по api
всех сервисов будут тормозить
- безопасность - нет, данные о компаниях доступны только авторизованным пользователям.
- масштабируемость - да, также как и с пунктом производительности, может каскадно заафектить другие микросервисы..
- надежность - да, также как и с пунктом производительности, может каскадно заафектить другие микросервисы..

пространство допустимых изменений
- изменение/добавление полей в контракте общих данных о компании используемых в авторизованном API, может заафектить все новообновленные микросервисы
- изменение/добавлении логики регистрации компании, может заафектить последующий онбординг пользователя.

4) Зависимость от реестров данных компании в онбординге

семантика 
- статическая семантика - нет, импортирование модулей не происходит.
- динамическая семантика - да, используется Http вызов в другой микросервис.
- логика программы (Функциональные требования) - да, один из стартовых шаг онбординга, зависит от логики наличия компании в реестре.

характеристики
- производительность (переходов между шагами онбординга) - нет, поскольку используется оркестратор камунда,
первоначальные шаги переключается асинхронно, при этом в процессе идет заполнение данных компании из реестра, это может аффектить время перехода между шагами,
но не производительность, ну и соот-о есть общие таймауты, при таймауте пользователя, заставит дополнительно заполнять шаги по данным, которые не смогли достать из реестров.

- безопасность - да, если в адресе компании из реестра вернут какую-нибудь ссылку со скамом, она отобразится пользователю, в теории он может на нее перейти.
- масштабируемость - нет, реестры выделены в отдельный микросервис.
- надежность - нет, реестры выделены в отдельный микросервис, и в онбординге есть try catch с таймаутом, который кинет при необходимости
пользователя на мануальное заполнение данных.

пространство допустимых изменений
- изменение логики работы конкретного реестра - нет зависимости, это изменение в другом микросервисе.

Итого
Рассмотрение в зависимости от конкретных характеристик реально позволяет понять, как зависимость может аффектить 
конкретную часть или всю систему, теперь с этим куда проще разбираться, потому что раньше в голове было просто - зависит не зависит.
Теперь же можно для каждой зависимости выстроить отдельную табличку и посмотреть какие характеристики системы они аффектят,
это позволит принимать решения по приоритезации тех долговых задач, очень круто!