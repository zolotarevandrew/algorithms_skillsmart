1) Попытался сделать что-то подобное через директивы препроцессора
#define v1
#define v2

несколько неудобно такое писать и поддерживать, разработка сильно усложняется.
Изменение версии требует перекомпиляции кода, нельзя сделать динамическое переключение.

Да можно включать или исключать определенные части кода, что полезно для создания разных сборок.
Но кажется, затея не совсем оправдана, по крайней мере в рамках c#.


2) Версионирование через аттрибуты.
Подумал над такой затеей, как динамическое распознавание версии в зависимости от наличия определенных полей.
Например, если это rest api и в jobject пришли два поля Name, v1field понимаем, что это версия 1.0.0 и выбираем нужный контракт и редиректим на его старый обработчик.
Конечно, тут есть проблема не обязательных полей, но в некоторых случаях, такой подход может быть оправдан.

3) source generator-ы
генерация кода в зависимости от версии, тоже кажется сильно усложняет понимание и разработку.
проще иметь фиксированный список контрактов и версий в таком случае.


Итого - буду еще думать в сторону, как правильнее реализовывать версионирование в рамках контрактов и апи.
не смог найти для себя явные применения описанного подхода, по крайней мере в рамках c#.



