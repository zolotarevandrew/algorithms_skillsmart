Итого - расписал 5 адекватных свойств корректности(добавил новые тесты) - для двух важных вещей из проекта.

Я уже думал ранее о таком аспекте, как свойства корректности системы - поскольку зачастую тесты, которые пишут разработчики, 
покрывают какие-то корнер кейсы - а саму важную суть упускают из вида.

Также планировал сделать условную таблицу для функциональности и описать туда ее свойства корректности 
- чтобы важный функционал был покрыт соответствующими unit/backend/e2e/ui тестами.
Кажется это сильно улучшит качество регрессионного тестирования в проекте + все будут понимать какие точки/свойства реально важны.

Но все же - для себя я могу взять следующее - не смотреть на код при написании unit тестов, отталкиваться от корректности и реальных требований.
Это конечно приводит к тому, что TDD не особо взлетит, но я как и писал в других заданиях, не особо полагаюсь на эту технику, а стараюсь
отталкиваться от 3-го логического уровня (это также улучшает сами абстракции).

НО теперь не смотря на код, тесты будут реальны привязаны к спецификации, 
я до этого все же не понимал как это сделать до конца - теперь через свойства корректности, сделать это куда проще! 
Поскольку полагался на код и писал тесты, все же под реально написанный код.