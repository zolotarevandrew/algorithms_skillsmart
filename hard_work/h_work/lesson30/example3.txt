var foundRawData = await _rawDataStore.GetByType(companyId, identity, RawDataType.Financials);

if (ShouldReload(foundRawData, forceReload))
{
    return await Reload(companyId, identity);
}

var desinitizedRawData = await _sanitizer.Desanitize(foundRawData.Response);

var response = desinitizedRawData.FromJSON<FinancialsResponse>();

return new CompanyInfoFinancialsDataSource(companyId, response);


При загрузке данных из источников по бизнесам, есть необходимость сохранять их к себе в базу заранее, чтобы не платить 
лишних денег.
Есть повторяющийся паттерн, который пока что было трудно вынести в какую-то абстракцию
- Смотрим есть ли сырые данные
- Понимаем нужно ли их перезагрузить, на основе наличия ошибки или флага из апи
- Если нужно перезагрузить, то перезагружаем
- Если не нужно, то десериализуем их и возвращаем

На самом деле это выглядит просто как "умный клиент", который просто сохраняет данные в БД попутно после запроса, если нужно.
Сейчас же сначала заводится Rest/Xml Client, а на его основе выстраиваются N штук новых классов абстракций (практически равных количеству запросов в клиенте)
для сохранения сырых данных.

Проще иметь, один Rest/Xml клиент, в том числе для нужд интеграционного тестирования, и один видимо отдельный "умный" клиент, с которым будет работать слой бизнес логики,
разбрасывать каждый метод в отдельную абстракцию плохая практика.
 