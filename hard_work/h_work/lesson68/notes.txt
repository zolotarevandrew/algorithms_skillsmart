текущий проект

1) модульность

Старался делать архитектуру в стиле verticale slices, где каждый модуль относительно независим от другого, но понятно использует общие механизмы ядра.
Часть логики внутри процессов в камунде и часть в коде, это создает сложность в понимании общей задуманной концепции.
Большое количества тех. Долга (мало тестов, логика разбросана местами и не изолирована модулями)

Процент к идеалу - 50%


2) восстановление замысла

Именование местами не явное и требует достаточных усилий, чтобы разобраться.
Был описан глоссарий терминов и общая документация, но оно не до конца позволяет понять как писать логику и какие сущности использовать в коде.

Процент к идеалу - 40%.

3) замысел в одном месте

Здесь скорее про общую архитектуру и способность быстро вносить изменения, не ломая текущее.
Достаточно сложно на этапе горящей пятой точки - заложить хоть какую-то архитектуру. 
Функциональные требования нечеткие, и никем не были описаны. Собираем их сами на ходу.

Процент к идеалу - 40%.

4) робастность

Практически нет адекватных структур данных, которые соблюдают необходимые инварианты системы, поскольку все делалось разными людьми в разное время.

Процент к идеалу - 50%

Предыдущий проект
1) модульность

Сделал архитектуру в стиле clean architecture, где все сильно связано между собой.
Сущности используются в разных модулях и изменение может поломать сразу несколько модулей.
Хорошо получилось отделить модуль подачи от основного модуля. Общение происходит по шине и данные конвертируются в подачу в нужном формате

Процент к идеалу - 30%

2) восстановление замысла

Именование на английском не особо коррелирует с русскими терминами (птс, стс и тп) - хоть и старался называть явным образом.
Нет никакой документации и глоссария, знания в головах разработчиков и сотрудников.

Процент к идеалу - 30%.

3) замысел в одном месте

Вся бизнес логика лежит в конкретных логических папках, но это не особо помогает восстановить общий замысел системы.
При этом многое можно было сделать гораздо проще, не дублируя один и тот же код - недостает полиморфности.
Разделение на разные сборки сделано не совсем корректно, из-за попсовой clean architecture.

Процент к идеалу - 30%.

4) робастность

Пытался вводить value object из ddd, базовые инварианты системы соблюдаются, часто обьект нельзя создать в «сломанном» состоянии.
При этом нет адекватных структур данных, и бизнес логика плохо покрыта тестами.

Процент к идеалу - 60%