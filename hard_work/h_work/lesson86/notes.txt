1) Менеджер каналов (бронирования и отельная тематика)

У отеля есть общая система управления и множество подключенных каналов.

Онтология:
Канал или канал продаж — это сущность, через которую отельер может получать бронирования и управлять квотой и ценами на свои номера.
Зачастую они имеют схожие структуры данных, передаваемых по API.
(Изменение квоты/изменение цен/получение информации о бронированиях)
То есть сразу видна общая абстракция канала продаж.

Поломки:
- Существуют ли кастомные настройки определенных каналов (не общие API методы)?
- Есть ли каналы без поддержки изменения квоты/цен/бронирований?
- Как работать с кастомными настройками тарифов (спецскидки)?

Общие рассуждения:
При проектировании системы, как я помню, не привлекался эксперт, который разбирается в этой теме, 
разработчикам приходилось разбираться самим, вместе с отельерами.
Естественно, множество вещей не удалось заложить при первом запуске, но система развивалась от проектирования к опыту, 
что позволило создать качественный продукт.

2) Заявка на пропуск

Онтология:
Заявка на пропуск представляет собой набор документов и данных, необходимых для подачи заявки на пропуск для проезда грузового транспорта в зоне МКАД/ТТК/СК и т.п.
- СТС и ПТС;
- Договоры аренды/перевозки;
- Диагностическая карта (при наличии);
И другие документы.

При этом есть отдельные сущности - Транспортное средство, Контрагент, Справочники, Водители, Маршруты.
Таким образом, заявка на пропуск — это некий конструктор из сущностей с указанием типа и даты подачи, на основе которого формируются документы и сам набор данных.

Поломки:
- Как учитывать в системе белорусские, казахские и другие машины, какие у них есть документы?
- Договоры бывают разными, какие шаблоны договоров существуют для каждого типа?
- Как работать с большими компаниями, у которых обширный автопарк? Нужны ли для этого отдельные сущности?

Общие рассуждения:
В данной системе не возникало особых сложностей, поскольку это типичная система документооборота.
Самым сложным моментом оказалась интеграция с государственными системами, выполненная частично в «сером» режиме.

3) Задачи для работы аналитиков с данными клиента

Онтология:
Общая родительская задача ревью содержит дочерние задачи, каждая из которых показывает аналитику список датапоинтов и их рисков на момент заполнения клиентом.
Родительская задача переходит в следующий статус, когда все дочерние задачи переходят в определенный статус.
Конкретная дочерняя задача переходит по статусам с помощью аналитиков.
Задачи будут добавляться часто, поэтому требуется поддержка «любых типов задач».

Поломки:
- Что значит «любые типы задач»? Мы проектируем Jira?
- Зачем нужна родительская задача, если все задачи решаются параллельно?
- Могут ли задачи иметь общие изменяемые данные? Если да, то для чего?

Общие рассуждения:
Было получено максимально конкретное и нормальное техническое задание.
Однако система получилась гиперсложной, с множеством ненужных абстракций,
поскольку закладывалась возможность работы с «любым типом задач» в будущем.

4) Баннер недостающих датапоинтов (Улучшение предыдущей версии задач)

Онтология:
Общий баннер, показывающий недостающие датапоинты, которые необходимо проверить или дозаполнить аналитику.
При этом это все же представляет собой сущность ревью данных, а не просто баннер.
Типы ревью бывают разные:
- Мануальное ревью всех данных (если не хотим автоматически открывать счета);
- Ревью недостающих данных;
- Специфическое ревью данных на определенный момент времени.
Аналитик может завершить ревью, нажав кнопку Done, тем самым процесс открытия счета продолжится.

Поломки:
- Что произойдет, если дизайн изменится (и мы будем считать, что это не ревью, а баннер)?
- Возможны ли другие действия помимо Done (например, добавление проверки по принципу «четырех глаз»)? Это намекает на необходимость описания статусной модели.
- Какие критически важные точки необходимо перепроверить при завершении ревью, чтобы аналитики не могли обмануть систему?

Общие рассуждения:
На основе опыта удалось превратить техническое задание в нечто конкретное и связать сущность реального мира («ревью») с конкретной и простой реализацией.
При этом не было жесткой привязки к текущей реализации в виде баннера — в будущем это может быть более функциональное API.

Итого:

Местами не удалось полностью погрузиться в онтологию при решении этого задания, так как она частично смешана с техническим заданием.

При анализе ТЗ зачастую больше интуитивно погружаюсь в сторону поиска поломок. 
Однако с опытом пришел к выводу, что онтологии тоже необходимо уделять достаточно внимания, иначе сущности окажутся неполноценными, 
в будущем возникнут проблемы с развитием системы.

