интересно, что про TDD слышал, но толком не использовал.
и зачастую типы мышления реально были спутаны в голове.

Прочитав заметку про TDD, сразу уложилось в голове, что надо думать на уровне спецификации.
В примерах в папке before
- сначала прочитал спецификацию от продакта
- уложил в голове, что нужно сделать
- сделал логику описанную продактом более прозрачной (нежели была куча условий тупо описанных)
- продумал типы данных без реализации отражающие логику из ТЗ
- написал тесты
- сделал реализацию

Самое интересное, что начал сразу думать в рамках, как это будет использоваться стратегически, 
а не просто реализовал, то что описал продакт.
Конечно итак думал стратегически, но этот пазлик в голову сложился - это радует.


После в папке after 
Идея была иметь баннеры, которые бы кидали на экраны с ошибкой для переотправки данных.
Сразу возникло понимание и обсудил это с продактом, что это механизм дозапроса данных - просто пока что, он реализуется через баннеры, дальше может поменяться.
- начал продумывать какие типичные сценарии использования
- сделал подобие АТД под данную механику
- сделал тесты-спецификации под конкретные реализации данных дозапросов
- написал реализацию каждого дозапроса
- тесты и реализация, следуют логической архиктектуре - дозапроса, а не просто набор реализаций, которые не понятно зачем используются и кидают какие-то баннеры.

В итоге могу сказать, что думание на 3-ом уровне + TDD
- существенно упрощает стратегическое развитие системы
- заставляет писать более понятный и поддерживаемый код
- регресс из коробки, поскольку спецификация уже есть в тестах


